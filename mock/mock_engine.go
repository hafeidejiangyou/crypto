// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine.go
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock_engine.go -package crypto -source ./engine.go
//

// Package crypto is a generated GoMock package.
package crypto

import (
	elliptic "crypto/elliptic"
	hash "hash"
	io "io"
	reflect "reflect"

	crypto "github.com/meshplus/crypto"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretKey is a mock of SecretKey interface.
type MockSecretKey struct {
	ctrl     *gomock.Controller
	recorder *MockSecretKeyMockRecorder
}

// MockSecretKeyMockRecorder is the mock recorder for MockSecretKey.
type MockSecretKeyMockRecorder struct {
	mock *MockSecretKey
}

// NewMockSecretKey creates a new mock instance.
func NewMockSecretKey(ctrl *gomock.Controller) *MockSecretKey {
	mock := &MockSecretKey{ctrl: ctrl}
	mock.recorder = &MockSecretKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretKey) EXPECT() *MockSecretKeyMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockSecretKey) Decrypt(src []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", src)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockSecretKeyMockRecorder) Decrypt(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockSecretKey)(nil).Decrypt), src)
}

// Destroy mocks base method.
func (m *MockSecretKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSecretKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSecretKey)(nil).Destroy))
}

// Encrypt mocks base method.
func (m *MockSecretKey) Encrypt(src []byte, reader io.Reader) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", src, reader)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockSecretKeyMockRecorder) Encrypt(src, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockSecretKey)(nil).Encrypt), src, reader)
}

// MockPublicKey is a mock of PublicKey interface.
type MockPublicKey struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyMockRecorder
}

// MockPublicKeyMockRecorder is the mock recorder for MockPublicKey.
type MockPublicKeyMockRecorder struct {
	mock *MockPublicKey
}

// NewMockPublicKey creates a new mock instance.
func NewMockPublicKey(ctrl *gomock.Controller) *MockPublicKey {
	mock := &MockPublicKey{ctrl: ctrl}
	mock.recorder = &MockPublicKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKey) EXPECT() *MockPublicKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockPublicKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockPublicKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPublicKey)(nil).Bytes))
}

// Encrypt mocks base method.
func (m *MockPublicKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPublicKeyMockRecorder) Encrypt(msg, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPublicKey)(nil).Encrypt), msg, reader)
}

// GetKeyInfo mocks base method.
func (m *MockPublicKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo.
func (mr *MockPublicKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockPublicKey)(nil).GetKeyInfo))
}

// RichBytes mocks base method.
func (m *MockPublicKey) RichBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RichBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RichBytes indicates an expected call of RichBytes.
func (mr *MockPublicKeyMockRecorder) RichBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RichBytes", reflect.TypeOf((*MockPublicKey)(nil).RichBytes))
}

// Verify mocks base method.
func (m *MockPublicKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPublicKeyMockRecorder) Verify(msg, hasher, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPublicKey)(nil).Verify), msg, hasher, sig)
}

// MockPrivateKey is a mock of PrivateKey interface.
type MockPrivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyMockRecorder
}

// MockPrivateKeyMockRecorder is the mock recorder for MockPrivateKey.
type MockPrivateKeyMockRecorder struct {
	mock *MockPrivateKey
}

// NewMockPrivateKey creates a new mock instance.
func NewMockPrivateKey(ctrl *gomock.Controller) *MockPrivateKey {
	mock := &MockPrivateKey{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateKey) EXPECT() *MockPrivateKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockPrivateKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockPrivateKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPrivateKey)(nil).Bytes))
}

// Decrypt mocks base method.
func (m *MockPrivateKey) Decrypt(cipher []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cipher)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockPrivateKeyMockRecorder) Decrypt(cipher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockPrivateKey)(nil).Decrypt), cipher)
}

// Destroy mocks base method.
func (m *MockPrivateKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPrivateKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPrivateKey)(nil).Destroy))
}

// Encrypt mocks base method.
func (m *MockPrivateKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPrivateKeyMockRecorder) Encrypt(msg, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPrivateKey)(nil).Encrypt), msg, reader)
}

// GetKeyInfo mocks base method.
func (m *MockPrivateKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo.
func (mr *MockPrivateKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockPrivateKey)(nil).GetKeyInfo))
}

// RichBytes mocks base method.
func (m *MockPrivateKey) RichBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RichBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RichBytes indicates an expected call of RichBytes.
func (mr *MockPrivateKeyMockRecorder) RichBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RichBytes", reflect.TypeOf((*MockPrivateKey)(nil).RichBytes))
}

// Sign mocks base method.
func (m *MockPrivateKey) Sign(msg []byte, hasher hash.Hash, rand io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg, hasher, rand)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockPrivateKeyMockRecorder) Sign(msg, hasher, rand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivateKey)(nil).Sign), msg, hasher, rand)
}

// Verify mocks base method.
func (m *MockPrivateKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPrivateKeyMockRecorder) Verify(msg, hasher, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPrivateKey)(nil).Verify), msg, hasher, sig)
}

// MockSignKey is a mock of SignKey interface.
type MockSignKey struct {
	ctrl     *gomock.Controller
	recorder *MockSignKeyMockRecorder
}

// MockSignKeyMockRecorder is the mock recorder for MockSignKey.
type MockSignKeyMockRecorder struct {
	mock *MockSignKey
}

// NewMockSignKey creates a new mock instance.
func NewMockSignKey(ctrl *gomock.Controller) *MockSignKey {
	mock := &MockSignKey{ctrl: ctrl}
	mock.recorder = &MockSignKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignKey) EXPECT() *MockSignKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockSignKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockSignKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockSignKey)(nil).Bytes))
}

// Destroy mocks base method.
func (m *MockSignKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSignKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSignKey)(nil).Destroy))
}

// GetKeyInfo mocks base method.
func (m *MockSignKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo.
func (mr *MockSignKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockSignKey)(nil).GetKeyInfo))
}

// RichBytes mocks base method.
func (m *MockSignKey) RichBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RichBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RichBytes indicates an expected call of RichBytes.
func (mr *MockSignKeyMockRecorder) RichBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RichBytes", reflect.TypeOf((*MockSignKey)(nil).RichBytes))
}

// Sign mocks base method.
func (m *MockSignKey) Sign(msg []byte, hasher hash.Hash, rand io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg, hasher, rand)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignKeyMockRecorder) Sign(msg, hasher, rand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignKey)(nil).Sign), msg, hasher, rand)
}

// Verify mocks base method.
func (m *MockSignKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSignKeyMockRecorder) Verify(msg, hasher, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSignKey)(nil).Verify), msg, hasher, sig)
}

// MockVerifyKey is a mock of VerifyKey interface.
type MockVerifyKey struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyKeyMockRecorder
}

// MockVerifyKeyMockRecorder is the mock recorder for MockVerifyKey.
type MockVerifyKeyMockRecorder struct {
	mock *MockVerifyKey
}

// NewMockVerifyKey creates a new mock instance.
func NewMockVerifyKey(ctrl *gomock.Controller) *MockVerifyKey {
	mock := &MockVerifyKey{ctrl: ctrl}
	mock.recorder = &MockVerifyKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyKey) EXPECT() *MockVerifyKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockVerifyKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockVerifyKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockVerifyKey)(nil).Bytes))
}

// GetKeyInfo mocks base method.
func (m *MockVerifyKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo.
func (mr *MockVerifyKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockVerifyKey)(nil).GetKeyInfo))
}

// RichBytes mocks base method.
func (m *MockVerifyKey) RichBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RichBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RichBytes indicates an expected call of RichBytes.
func (mr *MockVerifyKeyMockRecorder) RichBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RichBytes", reflect.TypeOf((*MockVerifyKey)(nil).RichBytes))
}

// Verify mocks base method.
func (m *MockVerifyKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockVerifyKeyMockRecorder) Verify(msg, hasher, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerifyKey)(nil).Verify), msg, hasher, sig)
}

// MockEncKey is a mock of EncKey interface.
type MockEncKey struct {
	ctrl     *gomock.Controller
	recorder *MockEncKeyMockRecorder
}

// MockEncKeyMockRecorder is the mock recorder for MockEncKey.
type MockEncKeyMockRecorder struct {
	mock *MockEncKey
}

// NewMockEncKey creates a new mock instance.
func NewMockEncKey(ctrl *gomock.Controller) *MockEncKey {
	mock := &MockEncKey{ctrl: ctrl}
	mock.recorder = &MockEncKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncKey) EXPECT() *MockEncKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockEncKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockEncKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockEncKey)(nil).Bytes))
}

// Encrypt mocks base method.
func (m *MockEncKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncKeyMockRecorder) Encrypt(msg, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncKey)(nil).Encrypt), msg, reader)
}

// GetKeyInfo mocks base method.
func (m *MockEncKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo.
func (mr *MockEncKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockEncKey)(nil).GetKeyInfo))
}

// MockDecKey is a mock of DecKey interface.
type MockDecKey struct {
	ctrl     *gomock.Controller
	recorder *MockDecKeyMockRecorder
}

// MockDecKeyMockRecorder is the mock recorder for MockDecKey.
type MockDecKeyMockRecorder struct {
	mock *MockDecKey
}

// NewMockDecKey creates a new mock instance.
func NewMockDecKey(ctrl *gomock.Controller) *MockDecKey {
	mock := &MockDecKey{ctrl: ctrl}
	mock.recorder = &MockDecKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecKey) EXPECT() *MockDecKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockDecKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockDecKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockDecKey)(nil).Bytes))
}

// Decrypt mocks base method.
func (m *MockDecKey) Decrypt(cipher []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cipher)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecKeyMockRecorder) Decrypt(cipher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecKey)(nil).Decrypt), cipher)
}

// Destroy mocks base method.
func (m *MockDecKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDecKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDecKey)(nil).Destroy))
}

// Encrypt mocks base method.
func (m *MockDecKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockDecKeyMockRecorder) Encrypt(msg, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockDecKey)(nil).Encrypt), msg, reader)
}

// GetKeyInfo mocks base method.
func (m *MockDecKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo.
func (mr *MockDecKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockDecKey)(nil).GetKeyInfo))
}

// MockLevel is a mock of Level interface.
type MockLevel struct {
	ctrl     *gomock.Controller
	recorder *MockLevelMockRecorder
}

// MockLevelMockRecorder is the mock recorder for MockLevel.
type MockLevelMockRecorder struct {
	mock *MockLevel
}

// NewMockLevel creates a new mock instance.
func NewMockLevel(ctrl *gomock.Controller) *MockLevel {
	mock := &MockLevel{ctrl: ctrl}
	mock.recorder = &MockLevelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevel) EXPECT() *MockLevelMockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockLevel) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockLevelMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockLevel)(nil).GetLevel))
}

// MockPluginRandomFunc is a mock of PluginRandomFunc interface.
type MockPluginRandomFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginRandomFuncMockRecorder
}

// MockPluginRandomFuncMockRecorder is the mock recorder for MockPluginRandomFunc.
type MockPluginRandomFuncMockRecorder struct {
	mock *MockPluginRandomFunc
}

// NewMockPluginRandomFunc creates a new mock instance.
func NewMockPluginRandomFunc(ctrl *gomock.Controller) *MockPluginRandomFunc {
	mock := &MockPluginRandomFunc{ctrl: ctrl}
	mock.recorder = &MockPluginRandomFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginRandomFunc) EXPECT() *MockPluginRandomFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockPluginRandomFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginRandomFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginRandomFunc)(nil).GetLevel))
}

// Rander mocks base method.
func (m *MockPluginRandomFunc) Rander() (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rander")
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rander indicates an expected call of Rander.
func (mr *MockPluginRandomFuncMockRecorder) Rander() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rander", reflect.TypeOf((*MockPluginRandomFunc)(nil).Rander))
}

// MockPluginHashFunc is a mock of PluginHashFunc interface.
type MockPluginHashFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginHashFuncMockRecorder
}

// MockPluginHashFuncMockRecorder is the mock recorder for MockPluginHashFunc.
type MockPluginHashFuncMockRecorder struct {
	mock *MockPluginHashFunc
}

// NewMockPluginHashFunc creates a new mock instance.
func NewMockPluginHashFunc(ctrl *gomock.Controller) *MockPluginHashFunc {
	mock := &MockPluginHashFunc{ctrl: ctrl}
	mock.recorder = &MockPluginHashFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginHashFunc) EXPECT() *MockPluginHashFuncMockRecorder {
	return m.recorder
}

// GetHash mocks base method.
func (m *MockPluginHashFunc) GetHash(mode int) (crypto.Hasher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", mode)
	ret0, _ := ret[0].(crypto.Hasher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockPluginHashFuncMockRecorder) GetHash(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockPluginHashFunc)(nil).GetHash), mode)
}

// GetLevel mocks base method.
func (m *MockPluginHashFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginHashFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginHashFunc)(nil).GetLevel))
}

// MockPluginCryptFunc is a mock of PluginCryptFunc interface.
type MockPluginCryptFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginCryptFuncMockRecorder
}

// MockPluginCryptFuncMockRecorder is the mock recorder for MockPluginCryptFunc.
type MockPluginCryptFuncMockRecorder struct {
	mock *MockPluginCryptFunc
}

// NewMockPluginCryptFunc creates a new mock instance.
func NewMockPluginCryptFunc(ctrl *gomock.Controller) *MockPluginCryptFunc {
	mock := &MockPluginCryptFunc{ctrl: ctrl}
	mock.recorder = &MockPluginCryptFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginCryptFunc) EXPECT() *MockPluginCryptFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockPluginCryptFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginCryptFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginCryptFunc)(nil).GetLevel))
}

// GetSecretKey mocks base method.
func (m *MockPluginCryptFunc) GetSecretKey(mode int, pwd, key []byte) (crypto.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey", mode, pwd, key)
	ret0, _ := ret[0].(crypto.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretKey indicates an expected call of GetSecretKey.
func (mr *MockPluginCryptFuncMockRecorder) GetSecretKey(mode, pwd, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockPluginCryptFunc)(nil).GetSecretKey), mode, pwd, key)
}

// MockPluginSignFuncL0 is a mock of PluginSignFuncL0 interface.
type MockPluginSignFuncL0 struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSignFuncL0MockRecorder
}

// MockPluginSignFuncL0MockRecorder is the mock recorder for MockPluginSignFuncL0.
type MockPluginSignFuncL0MockRecorder struct {
	mock *MockPluginSignFuncL0
}

// NewMockPluginSignFuncL0 creates a new mock instance.
func NewMockPluginSignFuncL0(ctrl *gomock.Controller) *MockPluginSignFuncL0 {
	mock := &MockPluginSignFuncL0{ctrl: ctrl}
	mock.recorder = &MockPluginSignFuncL0MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginSignFuncL0) EXPECT() *MockPluginSignFuncL0MockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockPluginSignFuncL0) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginSignFuncL0MockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginSignFuncL0)(nil).GetLevel))
}

// GetVerifyKey mocks base method.
func (m *MockPluginSignFuncL0) GetVerifyKey(key []byte, mode int) (crypto.VerifyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", key, mode)
	ret0, _ := ret[0].(crypto.VerifyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey.
func (mr *MockPluginSignFuncL0MockRecorder) GetVerifyKey(key, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockPluginSignFuncL0)(nil).GetVerifyKey), key, mode)
}

// MockPluginSignFuncL1 is a mock of PluginSignFuncL1 interface.
type MockPluginSignFuncL1 struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSignFuncL1MockRecorder
}

// MockPluginSignFuncL1MockRecorder is the mock recorder for MockPluginSignFuncL1.
type MockPluginSignFuncL1MockRecorder struct {
	mock *MockPluginSignFuncL1
}

// NewMockPluginSignFuncL1 creates a new mock instance.
func NewMockPluginSignFuncL1(ctrl *gomock.Controller) *MockPluginSignFuncL1 {
	mock := &MockPluginSignFuncL1{ctrl: ctrl}
	mock.recorder = &MockPluginSignFuncL1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginSignFuncL1) EXPECT() *MockPluginSignFuncL1MockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockPluginSignFuncL1) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginSignFuncL1MockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginSignFuncL1)(nil).GetLevel))
}

// GetSignKey mocks base method.
func (m *MockPluginSignFuncL1) GetSignKey(keyIndex string) (crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignKey", keyIndex)
	ret0, _ := ret[0].(crypto.SignKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignKey indicates an expected call of GetSignKey.
func (mr *MockPluginSignFuncL1MockRecorder) GetSignKey(keyIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignKey", reflect.TypeOf((*MockPluginSignFuncL1)(nil).GetSignKey), keyIndex)
}

// GetVerifyKey mocks base method.
func (m *MockPluginSignFuncL1) GetVerifyKey(key []byte, mode int) (crypto.VerifyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", key, mode)
	ret0, _ := ret[0].(crypto.VerifyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey.
func (mr *MockPluginSignFuncL1MockRecorder) GetVerifyKey(key, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockPluginSignFuncL1)(nil).GetVerifyKey), key, mode)
}

// MockPluginSignFuncL2 is a mock of PluginSignFuncL2 interface.
type MockPluginSignFuncL2 struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSignFuncL2MockRecorder
}

// MockPluginSignFuncL2MockRecorder is the mock recorder for MockPluginSignFuncL2.
type MockPluginSignFuncL2MockRecorder struct {
	mock *MockPluginSignFuncL2
}

// NewMockPluginSignFuncL2 creates a new mock instance.
func NewMockPluginSignFuncL2(ctrl *gomock.Controller) *MockPluginSignFuncL2 {
	mock := &MockPluginSignFuncL2{ctrl: ctrl}
	mock.recorder = &MockPluginSignFuncL2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginSignFuncL2) EXPECT() *MockPluginSignFuncL2MockRecorder {
	return m.recorder
}

// CreateSignKey mocks base method.
func (m *MockPluginSignFuncL2) CreateSignKey() (string, crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(crypto.SignKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSignKey indicates an expected call of CreateSignKey.
func (mr *MockPluginSignFuncL2MockRecorder) CreateSignKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignKey", reflect.TypeOf((*MockPluginSignFuncL2)(nil).CreateSignKey))
}

// GetLevel mocks base method.
func (m *MockPluginSignFuncL2) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginSignFuncL2MockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginSignFuncL2)(nil).GetLevel))
}

// GetSignKey mocks base method.
func (m *MockPluginSignFuncL2) GetSignKey(keyIndex string) (crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignKey", keyIndex)
	ret0, _ := ret[0].(crypto.SignKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignKey indicates an expected call of GetSignKey.
func (mr *MockPluginSignFuncL2MockRecorder) GetSignKey(keyIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignKey", reflect.TypeOf((*MockPluginSignFuncL2)(nil).GetSignKey), keyIndex)
}

// GetVerifyKey mocks base method.
func (m *MockPluginSignFuncL2) GetVerifyKey(key []byte, mode int) (crypto.VerifyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", key, mode)
	ret0, _ := ret[0].(crypto.VerifyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey.
func (mr *MockPluginSignFuncL2MockRecorder) GetVerifyKey(key, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockPluginSignFuncL2)(nil).GetVerifyKey), key, mode)
}

// ParseAllCA mocks base method.
func (m *MockPluginSignFuncL2) ParseAllCA(arg0 []string) ([]crypto.CA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAllCA", arg0)
	ret0, _ := ret[0].([]crypto.CA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAllCA indicates an expected call of ParseAllCA.
func (mr *MockPluginSignFuncL2MockRecorder) ParseAllCA(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAllCA", reflect.TypeOf((*MockPluginSignFuncL2)(nil).ParseAllCA), arg0)
}

// ParseCertificate mocks base method.
func (m *MockPluginSignFuncL2) ParseCertificate(arg0 string) (crypto.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCertificate", arg0)
	ret0, _ := ret[0].(crypto.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCertificate indicates an expected call of ParseCertificate.
func (mr *MockPluginSignFuncL2MockRecorder) ParseCertificate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCertificate", reflect.TypeOf((*MockPluginSignFuncL2)(nil).ParseCertificate), arg0)
}

// MockPluginSignFuncL3 is a mock of PluginSignFuncL3 interface.
type MockPluginSignFuncL3 struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSignFuncL3MockRecorder
}

// MockPluginSignFuncL3MockRecorder is the mock recorder for MockPluginSignFuncL3.
type MockPluginSignFuncL3MockRecorder struct {
	mock *MockPluginSignFuncL3
}

// NewMockPluginSignFuncL3 creates a new mock instance.
func NewMockPluginSignFuncL3(ctrl *gomock.Controller) *MockPluginSignFuncL3 {
	mock := &MockPluginSignFuncL3{ctrl: ctrl}
	mock.recorder = &MockPluginSignFuncL3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginSignFuncL3) EXPECT() *MockPluginSignFuncL3MockRecorder {
	return m.recorder
}

// CreateSignKey mocks base method.
func (m *MockPluginSignFuncL3) CreateSignKey() (string, crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(crypto.SignKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSignKey indicates an expected call of CreateSignKey.
func (mr *MockPluginSignFuncL3MockRecorder) CreateSignKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignKey", reflect.TypeOf((*MockPluginSignFuncL3)(nil).CreateSignKey))
}

// GenerateLocalCA mocks base method.
func (m *MockPluginSignFuncL3) GenerateLocalCA(hostName string) (string, crypto.CA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLocalCA", hostName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(crypto.CA)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateLocalCA indicates an expected call of GenerateLocalCA.
func (mr *MockPluginSignFuncL3MockRecorder) GenerateLocalCA(hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLocalCA", reflect.TypeOf((*MockPluginSignFuncL3)(nil).GenerateLocalCA), hostName)
}

// GetLevel mocks base method.
func (m *MockPluginSignFuncL3) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginSignFuncL3MockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginSignFuncL3)(nil).GetLevel))
}

// GetSignKey mocks base method.
func (m *MockPluginSignFuncL3) GetSignKey(keyIndex string) (crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignKey", keyIndex)
	ret0, _ := ret[0].(crypto.SignKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignKey indicates an expected call of GetSignKey.
func (mr *MockPluginSignFuncL3MockRecorder) GetSignKey(keyIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignKey", reflect.TypeOf((*MockPluginSignFuncL3)(nil).GetSignKey), keyIndex)
}

// GetVerifyKey mocks base method.
func (m *MockPluginSignFuncL3) GetVerifyKey(key []byte, mode int) (crypto.VerifyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", key, mode)
	ret0, _ := ret[0].(crypto.VerifyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey.
func (mr *MockPluginSignFuncL3MockRecorder) GetVerifyKey(key, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockPluginSignFuncL3)(nil).GetVerifyKey), key, mode)
}

// Issue mocks base method.
func (m *MockPluginSignFuncL3) Issue(ca crypto.CA, hostname string, ct crypto.CertType, ext map[string]string, vk crypto.VerifyKey) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", ca, hostname, ct, ext, vk)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockPluginSignFuncL3MockRecorder) Issue(ca, hostname, ct, ext, vk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockPluginSignFuncL3)(nil).Issue), ca, hostname, ct, ext, vk)
}

// ParseAllCA mocks base method.
func (m *MockPluginSignFuncL3) ParseAllCA(arg0 []string) ([]crypto.CA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAllCA", arg0)
	ret0, _ := ret[0].([]crypto.CA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAllCA indicates an expected call of ParseAllCA.
func (mr *MockPluginSignFuncL3MockRecorder) ParseAllCA(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAllCA", reflect.TypeOf((*MockPluginSignFuncL3)(nil).ParseAllCA), arg0)
}

// ParseCertificate mocks base method.
func (m *MockPluginSignFuncL3) ParseCertificate(arg0 string) (crypto.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCertificate", arg0)
	ret0, _ := ret[0].(crypto.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCertificate indicates an expected call of ParseCertificate.
func (mr *MockPluginSignFuncL3MockRecorder) ParseCertificate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCertificate", reflect.TypeOf((*MockPluginSignFuncL3)(nil).ParseCertificate), arg0)
}

// MockPluginGenerateSessionKeyFunc is a mock of PluginGenerateSessionKeyFunc interface.
type MockPluginGenerateSessionKeyFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginGenerateSessionKeyFuncMockRecorder
}

// MockPluginGenerateSessionKeyFuncMockRecorder is the mock recorder for MockPluginGenerateSessionKeyFunc.
type MockPluginGenerateSessionKeyFuncMockRecorder struct {
	mock *MockPluginGenerateSessionKeyFunc
}

// NewMockPluginGenerateSessionKeyFunc creates a new mock instance.
func NewMockPluginGenerateSessionKeyFunc(ctrl *gomock.Controller) *MockPluginGenerateSessionKeyFunc {
	mock := &MockPluginGenerateSessionKeyFunc{ctrl: ctrl}
	mock.recorder = &MockPluginGenerateSessionKeyFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginGenerateSessionKeyFunc) EXPECT() *MockPluginGenerateSessionKeyFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method.
func (m *MockPluginGenerateSessionKeyFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockPluginGenerateSessionKeyFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginGenerateSessionKeyFunc)(nil).GetLevel))
}

// KeyAgreementFinal mocks base method.
func (m *MockPluginGenerateSessionKeyFunc) KeyAgreementFinal(curve elliptic.Curve, algo string, data1, data2FromPeer []byte) (crypto.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyAgreementFinal", curve, algo, data1, data2FromPeer)
	ret0, _ := ret[0].(crypto.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyAgreementFinal indicates an expected call of KeyAgreementFinal.
func (mr *MockPluginGenerateSessionKeyFuncMockRecorder) KeyAgreementFinal(curve, algo, data1, data2FromPeer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyAgreementFinal", reflect.TypeOf((*MockPluginGenerateSessionKeyFunc)(nil).KeyAgreementFinal), curve, algo, data1, data2FromPeer)
}

// KeyAgreementInit mocks base method.
func (m *MockPluginGenerateSessionKeyFunc) KeyAgreementInit(curve elliptic.Curve) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyAgreementInit", curve)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// KeyAgreementInit indicates an expected call of KeyAgreementInit.
func (mr *MockPluginGenerateSessionKeyFuncMockRecorder) KeyAgreementInit(curve any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyAgreementInit", reflect.TypeOf((*MockPluginGenerateSessionKeyFunc)(nil).KeyAgreementInit), curve)
}

// MockCA is a mock of CA interface.
type MockCA struct {
	ctrl     *gomock.Controller
	recorder *MockCAMockRecorder
}

// MockCAMockRecorder is the mock recorder for MockCA.
type MockCAMockRecorder struct {
	mock *MockCA
}

// NewMockCA creates a new mock instance.
func NewMockCA(ctrl *gomock.Controller) *MockCA {
	mock := &MockCA{ctrl: ctrl}
	mock.recorder = &MockCAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCA) EXPECT() *MockCAMockRecorder {
	return m.recorder
}

// GetHostName mocks base method.
func (m *MockCA) GetHostName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostName indicates an expected call of GetHostName.
func (mr *MockCAMockRecorder) GetHostName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostName", reflect.TypeOf((*MockCA)(nil).GetHostName))
}

// GetKeyIdentifier mocks base method.
func (m *MockCA) GetKeyIdentifier() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyIdentifier")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetKeyIdentifier indicates an expected call of GetKeyIdentifier.
func (mr *MockCAMockRecorder) GetKeyIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyIdentifier", reflect.TypeOf((*MockCA)(nil).GetKeyIdentifier))
}

// GetPubKeyForPairing mocks base method.
func (m *MockCA) GetPubKeyForPairing() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKeyForPairing")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPubKeyForPairing indicates an expected call of GetPubKeyForPairing.
func (mr *MockCAMockRecorder) GetPubKeyForPairing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKeyForPairing", reflect.TypeOf((*MockCA)(nil).GetPubKeyForPairing))
}

// String mocks base method.
func (m *MockCA) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCAMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCA)(nil).String))
}

// MockCert is a mock of Cert interface.
type MockCert struct {
	ctrl     *gomock.Controller
	recorder *MockCertMockRecorder
}

// MockCertMockRecorder is the mock recorder for MockCert.
type MockCertMockRecorder struct {
	mock *MockCert
}

// NewMockCert creates a new mock instance.
func NewMockCert(ctrl *gomock.Controller) *MockCert {
	mock := &MockCert{ctrl: ctrl}
	mock.recorder = &MockCertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCert) EXPECT() *MockCertMockRecorder {
	return m.recorder
}

// GetAuthorityKeyIdentifier mocks base method.
func (m *MockCert) GetAuthorityKeyIdentifier() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorityKeyIdentifier")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetAuthorityKeyIdentifier indicates an expected call of GetAuthorityKeyIdentifier.
func (mr *MockCertMockRecorder) GetAuthorityKeyIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorityKeyIdentifier", reflect.TypeOf((*MockCert)(nil).GetAuthorityKeyIdentifier))
}

// GetCAHostName mocks base method.
func (m *MockCert) GetCAHostName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCAHostName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCAHostName indicates an expected call of GetCAHostName.
func (mr *MockCertMockRecorder) GetCAHostName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCAHostName", reflect.TypeOf((*MockCert)(nil).GetCAHostName))
}

// GetCertType mocks base method.
func (m *MockCert) GetCertType() crypto.CertType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertType")
	ret0, _ := ret[0].(crypto.CertType)
	return ret0
}

// GetCertType indicates an expected call of GetCertType.
func (mr *MockCertMockRecorder) GetCertType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertType", reflect.TypeOf((*MockCert)(nil).GetCertType))
}

// GetExtName mocks base method.
func (m *MockCert) GetExtName() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtName")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetExtName indicates an expected call of GetExtName.
func (mr *MockCertMockRecorder) GetExtName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtName", reflect.TypeOf((*MockCert)(nil).GetExtName))
}

// GetHostName mocks base method.
func (m *MockCert) GetHostName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostName indicates an expected call of GetHostName.
func (mr *MockCertMockRecorder) GetHostName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostName", reflect.TypeOf((*MockCert)(nil).GetHostName))
}

// GetVerifyKey mocks base method.
func (m *MockCert) GetVerifyKey() crypto.VerifyKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey")
	ret0, _ := ret[0].(crypto.VerifyKey)
	return ret0
}

// GetVerifyKey indicates an expected call of GetVerifyKey.
func (mr *MockCertMockRecorder) GetVerifyKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockCert)(nil).GetVerifyKey))
}

// String mocks base method.
func (m *MockCert) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCertMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCert)(nil).String))
}

// VerifyCert mocks base method.
func (m *MockCert) VerifyCert(caList []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCert", caList)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCert indicates an expected call of VerifyCert.
func (mr *MockCertMockRecorder) VerifyCert(caList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCert", reflect.TypeOf((*MockCert)(nil).VerifyCert), caList)
}

// MockFlagReader is a mock of FlagReader interface.
type MockFlagReader struct {
	ctrl     *gomock.Controller
	recorder *MockFlagReaderMockRecorder
}

// MockFlagReaderMockRecorder is the mock recorder for MockFlagReader.
type MockFlagReaderMockRecorder struct {
	mock *MockFlagReader
}

// NewMockFlagReader creates a new mock instance.
func NewMockFlagReader(ctrl *gomock.Controller) *MockFlagReader {
	mock := &MockFlagReader{ctrl: ctrl}
	mock.recorder = &MockFlagReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagReader) EXPECT() *MockFlagReaderMockRecorder {
	return m.recorder
}

// GetFlag mocks base method.
func (m *MockFlagReader) GetFlag() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlag")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFlag indicates an expected call of GetFlag.
func (mr *MockFlagReaderMockRecorder) GetFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlag", reflect.TypeOf((*MockFlagReader)(nil).GetFlag))
}

// Read mocks base method.
func (m *MockFlagReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFlagReaderMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFlagReader)(nil).Read), p)
}
